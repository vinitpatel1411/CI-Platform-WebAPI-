// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20240517054153_AddUserModelProp")]
    partial class AddUserModelProp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.Admin", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ADMIN_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("AdminId");

                    b.ToTable("ADMIN", (string)null);
                });

            modelBuilder.Entity("Data.Models.Banner", b =>
                {
                    b.Property<long>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BANNER_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BannerId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("IMAGE");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("SORT_ORDER");

                    b.Property<string>("Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("BannerId");

                    b.ToTable("BANNER", (string)null);
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CITY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityId"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("CITY", (string)null);
                });

            modelBuilder.Entity("Data.Models.CmsPage", b =>
                {
                    b.Property<long>("CmsPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CMS_PAGE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CmsPageId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SLUG");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITLE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("CmsPageId");

                    b.ToTable("CMS_PAGE", (string)null);
                });

            modelBuilder.Entity("Data.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("COMMENT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"), 1L, 1);

                    b.Property<string>("ApprovalStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("APPROVAL_STATUS");

                    b.Property<string>("CommentMessage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("COMMENT_MESSAGE");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<long?>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("CommentId");

                    b.HasIndex("MissionId");

                    b.HasIndex("UserId");

                    b.ToTable("COMMENT", (string)null);
                });

            modelBuilder.Entity("Data.Models.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("COUNTRY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("Iso")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("ISO");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("CountryId");

                    b.ToTable("COUNTRY", (string)null);
                });

            modelBuilder.Entity("Data.Models.FavouriteMission", b =>
                {
                    b.Property<long>("FavouriteMissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FAVOURITE_MISSION_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FavouriteMissionId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("FavouriteMissionId");

                    b.HasIndex("MissionId");

                    b.HasIndex("UserId");

                    b.ToTable("FAVOURITE_MISSION", (string)null);
                });

            modelBuilder.Entity("Data.Models.GoalMission", b =>
                {
                    b.Property<long>("GoalMissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("GOAL_MISSION_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GoalMissionId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("GoalObjectiveText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GOAL_OBJECTIVE_TEXT");

                    b.Property<int?>("GoalValue")
                        .HasColumnType("int")
                        .HasColumnName("GOAL_VALUE");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("GoalMissionId");

                    b.HasIndex("MissionId");

                    b.ToTable("GOAL_MISSION", (string)null);
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.Property<long>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MissionId"), 1L, 1);

                    b.Property<string>("Availability")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AVAILABILITY");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("CITY_ID");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("END_DATE");

                    b.Property<string>("MissionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MISSION_TYPE");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ORGANIZATION_NAME");

                    b.Property<string>("ShortDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SHORT_DESCRIPTION");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint")
                        .HasColumnName("THEME_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("TITLE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("MissionId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ThemeId");

                    b.ToTable("MISSION", (string)null);
                });

            modelBuilder.Entity("Data.Models.MissionApplication", b =>
                {
                    b.Property<long>("MissionApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_APPLICATION_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MissionApplicationId"), 1L, 1);

                    b.Property<DateTime?>("AppliedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("APPLIED_AT");

                    b.Property<string>("ApprovalStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("APPROVAL_STATUS");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("MissionApplicationId");

                    b.HasIndex("MissionId");

                    b.HasIndex("UserId");

                    b.ToTable("MISSION_APPLICATION", (string)null);
                });

            modelBuilder.Entity("Data.Models.MissionMedia", b =>
                {
                    b.Property<long>("MissionMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_MEDIA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MissionMediaId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("MediaName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MEDIA_NAME");

                    b.Property<string>("MediaPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MEDIA_PATH");

                    b.Property<string>("MediaType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MEDIA_TYPE");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("MissionMediaId")
                        .HasName("PK__MISSION___E70AA8B7FA9E09E3");

                    b.HasIndex("MissionId");

                    b.ToTable("MISSION_MEDIA", (string)null);
                });

            modelBuilder.Entity("Data.Models.MissionRating", b =>
                {
                    b.Property<long>("MissionRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_RATING_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MissionRatingId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("RATING");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("MissionRatingId");

                    b.HasIndex("MissionId");

                    b.HasIndex("UserId");

                    b.ToTable("MISSION_RATING", (string)null);
                });

            modelBuilder.Entity("Data.Models.MissionSkill", b =>
                {
                    b.Property<long>("MissionSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_SKILL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MissionSkillId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_ID");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint")
                        .HasColumnName("SKILL_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("MissionSkillId");

                    b.HasIndex("MissionId");

                    b.HasIndex("SkillId");

                    b.ToTable("MISSION_SKILL", (string)null);
                });

            modelBuilder.Entity("Data.Models.MissionTheme", b =>
                {
                    b.Property<long>("MissionThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MISSION_THEME_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MissionThemeId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITLE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("MissionThemeId");

                    b.ToTable("MISSION_THEME", (string)null);
                });

            modelBuilder.Entity("Data.Models.ResetPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetPassword", (string)null);
                });

            modelBuilder.Entity("Data.Models.Skill", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SKILL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETED_AT");

                    b.Property<string>("SkillName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("SKILL_NAME");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("SkillId");

                    b.ToTable("SKILL", (string)null);
                });

            modelBuilder.Entity("Data.Models.Story", b =>
                {
                    b.Property<long>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoryId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MissionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StoryId");

                    b.HasIndex("MissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Story", (string)null);
                });

            modelBuilder.Entity("Data.Models.StoryInvite", b =>
                {
                    b.Property<long>("StoryInviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoryInviteId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StoryInviteId");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryInvite", (string)null);
                });

            modelBuilder.Entity("Data.Models.StoryMedium", b =>
                {
                    b.Property<long>("StoryMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoryMediaId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StoryMediaId");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryMedia");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Availablity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("AVATAR");

                    b.Property<int?>("Cityid")
                        .HasColumnType("int")
                        .HasColumnName("CITYID");

                    b.Property<int?>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<DateTime?>("Createdate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDATE");

                    b.Property<DateTime?>("Deletedate")
                        .HasColumnType("datetime")
                        .HasColumnName("DELETEDATE");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DEPARTMENT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Employeeid")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EMPLOYEEID");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LASTNAME");

                    b.Property<string>("Linkedinurl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LINKEDINURL");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PASSWORD");

                    b.Property<long>("Phonenumber")
                        .HasColumnType("bigint")
                        .HasColumnName("PHONENUMBER");

                    b.Property<string>("Profiletext")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROFILETEXT");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ROLE");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TITLE");

                    b.Property<DateTime?>("Updatedate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDATE");

                    b.Property<string>("Whyivolunteer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WHYIVOLUNTEER");

                    b.Property<string>("manager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.HasOne("Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK__CITY__COUNTRY_ID__5812160E");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.Models.Comment", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("Comments")
                        .HasForeignKey("MissionId")
                        .HasConstraintName("FK__COMMENT__MISSION__0D7A0286");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__COMMENT__USER_ID__0E6E26BF");

                    b.Navigation("Mission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.FavouriteMission", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("FavouriteMissions")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK__FAVOURITE__MISSI__08B54D69");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("FavouriteMissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FAVOURITE__USER___09A971A2");

                    b.Navigation("Mission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.GoalMission", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("GoalMissions")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK__GOAL_MISS__MISSI__00200768");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.HasOne("Data.Models.City", "City")
                        .WithMany("Missions")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION__CITY_ID__6477ECF3");

                    b.HasOne("Data.Models.Country", "Country")
                        .WithMany("Missions")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION__COUNTRY__656C112C");

                    b.HasOne("Data.Models.MissionTheme", "Theme")
                        .WithMany("Missions")
                        .HasForeignKey("ThemeId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION__THEME_I__6383C8BA");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Data.Models.MissionApplication", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("MissionApplications")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_A__MISSI__7B5B524B");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("MissionApplications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_A__USER___7C4F7684");

                    b.Navigation("Mission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.MissionMedia", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("MissionMedia")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_M__MISSI__72C60C4A");

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("Data.Models.MissionRating", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("MissionRatings")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_R__MISSI__6E01572D");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("MissionRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_R__USER___6EF57B66");

                    b.Navigation("Mission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.MissionSkill", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("MissionSkills")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_S__MISSI__693CA210");

                    b.HasOne("Data.Models.Skill", "Skill")
                        .WithMany("MissionSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK__MISSION_S__SKILL__6A30C649");

                    b.Navigation("Mission");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Models.ResetPassword", b =>
                {
                    b.HasOne("Data.Models.User", "User")
                        .WithMany("ResetPasswords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ResetPass__UserI__4BAC3F29");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Story", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("Stories")
                        .HasForeignKey("MissionId")
                        .IsRequired()
                        .HasConstraintName("FK_Story_Mission_MissionId");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Story_User_UserId");

                    b.Navigation("Mission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.StoryInvite", b =>
                {
                    b.HasOne("Data.Models.Story", "Story")
                        .WithMany("StoryInvites")
                        .HasForeignKey("StoryId")
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Data.Models.StoryMedium", b =>
                {
                    b.HasOne("Data.Models.Story", "Story")
                        .WithMany("StoryMedia")
                        .HasForeignKey("StoryId")
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("Data.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Missions");
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteMissions");

                    b.Navigation("GoalMissions");

                    b.Navigation("MissionApplications");

                    b.Navigation("MissionMedia");

                    b.Navigation("MissionRatings");

                    b.Navigation("MissionSkills");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Data.Models.MissionTheme", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("Data.Models.Skill", b =>
                {
                    b.Navigation("MissionSkills");
                });

            modelBuilder.Entity("Data.Models.Story", b =>
                {
                    b.Navigation("StoryInvites");

                    b.Navigation("StoryMedia");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteMissions");

                    b.Navigation("MissionApplications");

                    b.Navigation("MissionRatings");

                    b.Navigation("ResetPasswords");

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
